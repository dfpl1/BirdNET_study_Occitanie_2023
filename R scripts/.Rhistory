confidence < 0.2 ~ "0.1",
confidence < 0.3 ~ "0.2",
confidence < 0.4 ~ "0.3",
confidence < 0.5 ~ "0.4",
confidence < 0.6 ~ "0.5",
confidence < 0.7 ~ "0.6",
confidence < 0.8 ~ "0.7",
confidence < 0.9 ~ "0.8",
confidence <= 1 ~ "0.9",
TRUE ~ "1"),
confidence_category = as.factor(confidence_category),
id_precision = as.numeric(correct_identification)) %>%
group_by(confidence_category) %>%
summarise(mean_id_precision = mean(id_precision),
id_precision_sd = sd(id_precision),
n = n(),
id_precision_se = id_precision_sd / sqrt(n))
jpeg(file = paste0(R_plots_path, "/", algorithm, " precision analysis/precision_by_confidence_level.jpeg"), width = 4000, height = 2700, res = 500)
ggplot(precision_results_by_confidence_category, aes(x=confidence_category, y=mean_id_precision)) +
geom_bar(position = position_nudge(x = 0.5),
stat = "identity",
colour = 'black',
fill = "#6B9BD5") +
geom_errorbar(aes(x=confidence_category, ymin=mean_id_precision-id_precision_se, ymax=mean_id_precision+id_precision_se),
position = position_nudge(x = 0.5),
width=0.5,
colour="black",
alpha=0.7,
size=0.5) +
scale_y_continuous(breaks = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1)) +
scale_x_discrete(limits = c("0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1")) +
xlab("Confidence score") +
ylab("Mean id_precision") +
ggtitle(paste0("Mean precision by confidence score in ", algorithm, " identifications")) +
theme_bw()
dev.off()
# BirdNET recall by confidence level
BirdNET_recall_results_1st_threshold <- read.csv(paste0(CSV_path, "/", algorithm, "_recall_results_", toString(first_threshold*100), ".csv"))
BirdNET_recall_results_1st_threshold[is.na(BirdNET_recall_results_1st_threshold)] = 0
BirdNET_recall_results_2nd_threshold <- read.csv(paste0(CSV_path, "/", algorithm, "_recall_results_", toString(second_threshold*100), ".csv"))
BirdNET_recall_results_2nd_threshold[is.na(BirdNET_recall_results_2nd_threshold)] = 0
BirdNET_recall_results_3rd_threshold <- read.csv(paste0(CSV_path, "/", algorithm, "_recall_results_", toString(third_threshold*100), ".csv"))
BirdNET_recall_results_3rd_threshold[is.na(BirdNET_recall_results_3rd_threshold)] = 0
species_labels <- read.csv2("../CSVs/species_labels.csv", sep = ",") %>%
mutate(species = case_when(label == "Den med" ~ "Dendrocoptes medius",
TRUE ~ species))
if (algorithm == "Google") {
recall_results_by_species <- BirdNET_recall_results_1st_threshold %>%
group_by(species) %>%
summarize(mean_confidence_in_correct_identifications = mean(mean_Google_confidence[mean_Google_confidence > 0]),
mean_id_recall = min(mean(proportion_of_time_detected), 1),
mean_rec_recall = mean(as.numeric(detected_by_Google)),
total_manual_detections = n()) %>%
left_join(species_labels,
by = "species")
} else {
recall_results_by_species <- BirdNET_recall_results_1st_threshold %>%
group_by(species) %>%
summarize(mean_confidence_in_correct_identifications = mean(mean_BirdNET_confidence[mean_BirdNET_confidence > 0]),
mean_id_recall = min(mean(proportion_of_time_detected), 1),
mean_rec_recall = mean(as.numeric(detected_by_BirdNET)),
total_manual_detections = n()) %>%
left_join(species_labels,
by = "species")
}
recall_results_by_species[is.na(recall_results_by_species)] = 0
jpeg(file = paste0(R_plots_path, "/", algorithm, " recall analysis/recall_(proportion_of_time_detected)_by_confidence_in_correct_identifications.jpeg"), width = 3300, height = 2400, res = 500)
ggplot(recall_results_by_species %>%
filter(mean_confidence_in_correct_identifications > 0),
aes(x=mean_confidence_in_correct_identifications,
y=mean_id_recall, label=label)) +
geom_point() +
geom_text_repel(size = 2.5,
nudge_y = 0.02) +
geom_smooth(method=lm, se=TRUE) +
xlab("Mean confidence in correct identifications") +
ylab("Mean id_recall") +
ggtitle(paste0(algorithm, " id_recall by confidence score"))
dev.off()
total_birds_detected <- read.csv("../CSVs/total_birds_detected_(annotations).csv")
recall_and_precision_results_by_species <- recall_results_by_species %>%
left_join(precision_results_by_species,
by = "species") %>%
left_join(total_birds_detected %>%
select(species, total_time, label),
by = c("species", "label")) %>%
mutate(total_time = case_when(is.na(total_time) ~ 0,
TRUE ~ total_time),
original_time = total_time,
total_time = log2(total_time))
recall_and_precision_results_by_species[is.na(recall_and_precision_results_by_species)] = 0
recall_results_by_species_with_at_least_30s <- recall_results_by_species %>%
mutate(species_number = paste0(species, " (n = ", total_manual_detections, ")")) %>%
left_join(total_birds_detected %>%
select(species, total_time),
by = "species") %>%
filter(total_time >= 30) %>%
left_join(recall_and_precision_results_by_species %>%
select(species, original_time),
by = "species") %>%
mutate(minutes = round(round(original_time, 0)/60, 0),
seconds = round(round(original_time, 0) %% 60, 0),
species_time = paste0(species, " (t = ", case_when(minutes > 0 ~ paste0(minutes, "m "),
TRUE ~ ""), round(seconds, 0), "s)"))
recall_results_by_species_with_less_than_30s <- recall_results_by_species %>%
mutate(species_number = paste0(species, " (n = ", total_manual_detections, ")")) %>%
left_join(total_birds_detected %>%
select(species, total_time),
by = "species") %>%
filter(total_time < 30)
average_id_recall_by_species_with_less_than_30s <- (recall_results_by_species_with_less_than_30s %>%
summarize(avg_id_recall = mean(mean_id_recall)))$avg_recall
average_id_recall_by_species_with_at_least_30s <- (recall_results_by_species_with_at_least_30s %>%
summarize(avg_id_recall = mean(mean_id_recall)))$avg_recall
# Average recall is higher for species with vocalization times higher than 30s
jpeg(file = paste0(R_plots_path, "/", algorithm, " recall analysis/recall_(proportion_of_time_detected)_by_confidence_in_correct_identifications_(only_species_with_at_least_30_seconds).jpeg"), width = 3300, height = 2400, res = 500)
ggplot(recall_results_by_species_with_at_least_30s %>%
filter(mean_confidence_in_correct_identifications > 0),
aes(x=mean_confidence_in_correct_identifications,
y=mean_id_recall, label=label)) +
geom_point() +
geom_text_repel(size = 2.5,
nudge_y = 0.02) +
geom_smooth(method=lm, se=TRUE) +
xlab("Mean confidence in correct identifications") +
ylab("Mean id_recall") +
ggtitle(paste0(algorithm, " id_recall by confidence score \n(only species with ≥30s total time)"))
dev.off()
jpeg(file = paste0(R_plots_path, "/", algorithm, " recall analysis/recall_(proportion_of_recordings_where_detected)_by_confidence_in_correct_identifications.jpeg"), width = 3300, height = 2400, res = 500)
ggplot(recall_results_by_species %>%
filter(mean_confidence_in_correct_identifications > 0),
aes(x=mean_confidence_in_correct_identifications,
y=mean_rec_recall,
label=label)) +
geom_point() +
geom_text_repel(size = 2.5,
nudge_y = 0.02) +
geom_smooth(method=lm, se=TRUE) +
xlab("Mean confidence in correct identifications") +
ylab("Mean rec_recall") +
ggtitle(paste0(algorithm, " rec_recall by confidence score"))
dev.off()
jpeg(file = paste0(R_plots_path, "/", algorithm, " recall analysis/recall_(proportion_of_recordings_where_detected)_by_confidence_in_correct_identifications_(only_species_with_at_least_30s).jpeg"), width = 3300, height = 2400, res = 500)
ggplot(recall_results_by_species_with_at_least_30s %>%
filter(mean_confidence_in_correct_identifications > 0),
aes(x=mean_confidence_in_correct_identifications,
y=mean_rec_recall,
label=label)) +
geom_point() +
geom_text_repel(size = 2.5,
nudge_y = 0.02) +
geom_smooth(method=lm, se=TRUE) +
xlab("Mean confidence in correct identifications") +
ylab("Mean rec_recall") +
ggtitle(paste0(algorithm, " rec_recall by confidence score \n(only species with ≥30s total time)"))
dev.off()
# BirdNET precision by anthropic noise
recording_acoustic_data <- read.csv("../CSVs/recordings_acoustic_data.csv")
# Analyses with different confidence thresholds
confidence_levels <- c(first_threshold, second_threshold, third_threshold)
confidence_labels <- c(toString(first_threshold*100), toString(second_threshold*100), toString(third_threshold*100))
confidence_plot_titles <- c(paste0(" with confidence score ≥ ", toString(first_threshold)), paste0(" with confidence score ≥ ", toString(second_threshold)), paste0(" with confidence score ≥ ", toString(third_threshold)))
BirdNET_PR_results_by_species <- read.csv(paste0(CSV_path, "/", algorithm, "_PR_results_by_species.csv"))
# Checking whether the number of birds singing or calling simultaneously has an influence on BirdNET performance
BirdNET_recall_results_by_audio_fragment <- read.csv(paste0(CSV_path, "/", algorithm, "_recall_by_audio_fragment.csv"))
recall_results_by_audio_fragment <- BirdNET_recall_results_by_audio_fragment %>%
group_by(recording_id, initial_time, final_time) %>%
summarize(n_species_annotated = n_distinct(species)) %>%
ungroup() %>%
left_join(recording_acoustic_data %>%
select(recording_id, NDSI_left),
by = "recording_id")
recall_results_by_audio_fragment <- recall_results_by_audio_fragment %>%
left_join(BirdNET_recall_results_by_audio_fragment,
by = c("recording_id", "initial_time", "final_time"))
BirdNET_precision_by_n_species_singing_simultaneously <- recall_results_by_audio_fragment %>%
filter(n_species_annotated > 0) %>%
left_join(BirdNET_precision_results,
by = c("recording_id", "initial_time", "final_time")) %>%
mutate(correct_identification = case_when(is.na(correct_identification) ~ FALSE,
TRUE ~ correct_identification)) %>%
group_by(n_species_annotated, species.y) %>%
summarize(mean_id_precision = mean(as.numeric(correct_identification)),
mean_NDSI = mean(NDSI_left)) %>%
rename("species" = "species.y")
BirdNET_recall_by_n_species_singing_simultaneously <- recall_results_by_audio_fragment %>%
group_by(n_species_annotated, species) %>%
summarize(mean_id_recall = mean(as.numeric(correctly_identified)),
mean_singing_time_per_fragment = mean(total_time),
mean_NDSI = mean(NDSI_left))
BirdNET_recall_by_n_individuals_singing_simultaneously <- recall_results_by_audio_fragment %>%
group_by(min_code_n_ind, species) %>%
summarize(mean_id_recall = mean(as.numeric(correctly_identified)),
mean_singing_time_per_fragment = mean(total_time),
mean_NDSI = mean(NDSI_left))
BirdNET_recall_by_singing_time_per_fragment <- recall_results_by_audio_fragment %>%
mutate(total_time = round(total_time / 0.25) * 0.25) %>%
group_by(total_time, species) %>%
summarize(mean_id_recall = mean(as.numeric(correctly_identified)),
mean_NDSI = mean(NDSI_left))
# Bar plots analyzing precision
BirdNET_mean_precision_by_n_species_singing_simultaneously <- BirdNET_precision_by_n_species_singing_simultaneously %>%
group_by(n_species_annotated) %>%
summarize(id_precision_sd = sd(mean_id_precision),
mean_id_precision = mean(mean_id_precision),
n = n(),
id_precision_se = id_precision_sd / sqrt(n))
jpeg(file = paste0(R_plots_path, "/", algorithm, " precision analysis/precision_by_number_of_species_vocalizing_simultaneously.jpeg"), width = 4000, height = 3000, res = 500)
ggplot(BirdNET_mean_precision_by_n_species_singing_simultaneously, aes(x=as.factor(n_species_annotated), y=mean_id_precision)) +
geom_bar(stat = "identity",
colour = 'black',
fill = "#6B9BD5") +
geom_errorbar(aes(x=as.factor(n_species_annotated), ymin=mean_id_precision-id_precision_se, ymax=mean_id_precision+id_precision_se),
width=0.5,
colour="black",
alpha=0.7,
size=0.5) +
xlab("Number of species vocalizing simultaneously") +
ylab("Mean id_precision") +
ggtitle(paste0(algorithm, " precision by number of species vocalizing simultaneously (confidence score >= 0.1)")) +
theme_bw()
dev.off()
# Bar plots analyzing recall
BirdNET_mean_recall_by_n_species_singing_simultaneously <- BirdNET_recall_by_n_species_singing_simultaneously %>%
group_by(n_species_annotated) %>%
summarize(id_recall_sd = sd(mean_id_recall),
mean_id_recall = mean(mean_id_recall),
n = n(),
id_recall_se = id_recall_sd / sqrt(n))
jpeg(file = paste0(R_plots_path, "/", algorithm, " recall analysis/recall_by_number_of_species_vocalizing_simultaneously.jpeg"), width = 4000, height = 3000, res = 500)
ggplot(BirdNET_mean_recall_by_n_species_singing_simultaneously, aes(x=as.factor(n_species_annotated), y=mean_id_recall)) +
geom_bar(stat = "identity",
colour = 'black',
fill = "#6B9BD5") +
geom_errorbar(aes(x=as.factor(n_species_annotated), ymin=mean_id_recall-id_recall_se, ymax=mean_id_recall+id_recall_se),
width=0.5,
colour="black",
alpha=0.7,
size=0.5) +
xlab("Number of species vocalizing simultaneously") +
ylab("Mean id_recall") +
ggtitle(paste0(algorithm, " recall by number of species vocalizing simultaneously (confidence score >= 0.1)")) +
theme_bw()
dev.off()
# Bar plots analyzing F1-scores
BirdNET_F1_score_by_n_species_singing_simultaneously <- BirdNET_recall_by_n_species_singing_simultaneously %>%
left_join(BirdNET_precision_by_n_species_singing_simultaneously,
by = c("n_species_annotated", "species")) %>%
mutate(mean_id_F1_score = 2 * 1 * mean_id_precision * mean_id_recall / (mean_id_precision + mean_id_recall))
BirdNET_F1_score_by_n_species_singing_simultaneously[is.na(BirdNET_F1_score_by_n_species_singing_simultaneously)] = 0
BirdNET_mean_F1_score_by_n_species_singing_simultaneously <- BirdNET_F1_score_by_n_species_singing_simultaneously %>%
group_by(n_species_annotated) %>%
summarize(id_F1_score_sd = sd(mean_id_F1_score),
mean_id_F1_score = mean(mean_id_F1_score),
n = n(),
id_F1_score_se = id_F1_score_sd / sqrt(n))
jpeg(file = paste0(R_plots_path, "/", algorithm, " precision and recall analysis/F1_score_by_number_of_species_vocalizing_simultaneously.jpeg"), width = 4000, height = 3000, res = 500)
ggplot(BirdNET_mean_F1_score_by_n_species_singing_simultaneously, aes(x=as.factor(n_species_annotated), y=mean_id_F1_score)) +
geom_bar(stat = "identity",
colour = 'black',
fill = "#6B9BD5") +
geom_errorbar(aes(x=as.factor(n_species_annotated), ymin=mean_id_F1_score-id_F1_score_se, ymax=mean_id_F1_score+id_F1_score_se),
width=0.5,
colour="black",
alpha=0.7,
size=0.5) +
xlab("Number of species vocalizing simultaneously") +
ylab("Mean id_F1-score") +
ggtitle(paste0(algorithm, " F1-score at the identification level\nby number of species vocalizing simultaneously (confidence score >= 0.1)")) +
theme_bw()
dev.off()
BirdNET_recall_by_n_individuals_singing_simultaneously <- BirdNET_recall_by_n_individuals_singing_simultaneously %>%
mutate(n_ind_label = case_when(min_code_n_ind == 1 ~ "1 bird",
min_code_n_ind == 2 ~ "2 birds of the same species",
min_code_n_ind == 3 ~ ">2 birds of the same species",
TRUE ~ "≥2 birds of different species"))
BirdNET_recall_by_n_individuals_singing_simultaneously$n_ind_label <- factor(BirdNET_recall_by_n_individuals_singing_simultaneously$n_ind_label, c("1 bird", "2 birds of the same species", ">2 birds of the same species", "≥2 birds of different species"))
jpeg(file = paste0(R_plots_path, "/", algorithm, " recall analysis/recall_by_number_of_birds_vocalizing_simultaneously.jpeg"), width = 4000, height = 3000, res = 500)
ggplot(BirdNET_recall_by_n_individuals_singing_simultaneously, aes(x = as.factor(n_ind_label), y = mean_id_recall, fill = n_ind_label)) +
geom_boxplot() +
xlab("Number of birds vocalizing simultaneously") +
ylab("Mean id_recall") +
ggtitle(paste0(algorithm, " recall by number of birds vocalizing simultaneously (confidence score >= 0.1)")) +
theme_bw() +
theme(legend.position = "none") +
scale_fill_manual(values = c("#84B8E1", "#84B8E1", "#84B8E1", "#84B8E1"))
dev.off()
BirdNET_mean_recall_by_singing_time_per_fragment <- BirdNET_recall_by_singing_time_per_fragment %>%
group_by(total_time) %>%
summarize(id_recall_sd = sd(mean_id_recall),
mean_id_recall = mean(mean_id_recall),
n = n(),
id_recall_se = id_recall_sd / sqrt(n))
jpeg(file = paste0(R_plots_path, "/", algorithm, " recall analysis/recall_by_actual_vocalization_time_in_the_audio_chunk_analyzed.jpeg"), width = 4900, height = 3000, res = 500)
ggplot(BirdNET_mean_recall_by_singing_time_per_fragment, aes(x=as.factor(total_time), y=mean_id_recall)) +
geom_bar(stat = "identity",
colour = 'black',
fill = "#6B9BD5") +
geom_errorbar(aes(x=as.factor(total_time), ymin=mean_id_recall-id_recall_se, ymax=mean_id_recall+id_recall_se),
width=0.5,
colour="black",
alpha=0.7,
size=0.5) +
xlab("Vocalization time (s)") +
ylab("Mean id_recall") +
ggtitle(paste0(algorithm, " recall by actual bird vocalization time in each 3-second audio segment analyzed (confidence score >= 0.1)")) +
theme_bw()
dev.off()
# Checking the normality of the distribution of the recall variable to determine whether we can perform an ANOVA analysis or not
# if (length(BirdNET_recall_by_n_species_singing_simultaneously$mean_recall) < 5000) {
#   shapiro.test(BirdNET_recall_by_n_species_singing_simultaneously$mean_recall)
#   hist(BirdNET_recall_by_n_species_singing_simultaneously$mean_recall)
# }
# The distribution of recall values is not normal. Therefore, we have to transform it before we can perform the ANOVA analysis.
# Nonetheless, neither sqrt nor logarithmic transformations transform the recall distribution into normal ones.
# Thus, a Spearman's correlation test will have to be performed insted of a Pearson's one.
cor.test(BirdNET_recall_by_n_species_singing_simultaneously$mean_id_recall, BirdNET_recall_by_n_species_singing_simultaneously$n_species_annotated, method = "spearman")
# The potential influence of the number of species vocalizing at the same time on recall results is high enough to be considered significant.
# And a Spearman's correlation test will have to be performed insted of a Pearson's one for the vocalization time analysis.
cor.test(BirdNET_mean_recall_by_singing_time_per_fragment$total_time, BirdNET_mean_recall_by_singing_time_per_fragment$mean_id_recall, method = "spearman")
# Spearman's correlation coefficient is 0.965, with a p-value < 2.2e-16, which indicates that the total vocalization time captured within a given prediction segment significantly influences recall results.
# Checking the normality of the distribution of the precision variable to determine whether we can perform an ANOVA analysis or not
# if (length(BirdNET_precision_by_n_species_singing_simultaneously$mean_precision) < 5000) {
#   shapiro.test(BirdNET_precision_by_n_species_singing_simultaneously$mean_precision)
#   hist(BirdNET_precision_by_n_species_singing_simultaneously$mean_precision)
# }
# The distribution of precision values is not normal. Therefore, we have to transform it before we can perform the ANOVA analysis.
# Nonetheless, neither sqrt nor logarithmic transformations transform the precision distribution into normal ones.
# Thus, a Spearman's correlation test will have to be performed insted of a Pearson's one.
cor.test(BirdNET_precision_by_n_species_singing_simultaneously$mean_id_precision, BirdNET_precision_by_n_species_singing_simultaneously$n_species_annotated, method = "spearman")
# The potential influence of the number of species vocalizing at the same time on precision results is high enough to be considered significant.
# Now testing the influence of the number of species vocalizing at the same time on F1-scores
cor.test(BirdNET_F1_score_by_n_species_singing_simultaneously$mean_id_F1_score, BirdNET_F1_score_by_n_species_singing_simultaneously$n_species_annotated, method = "spearman")
#---------------------------------------------------------------------------
# Generating results for each confidence level selected
i <- 1
precision_results_by_species <- BirdNET_precision_results %>%
filter(confidence >= confidence_levels[i]) %>%
mutate(species = as.factor(species),
precision = as.numeric(correct_identification)) %>%
group_by(species) %>%
summarize(mean_id_precision = mean(precision),
total_detections = n()) %>%
arrange(mean_id_precision)
if (i == 1) {
BirdNET_recall_results_to_use <- BirdNET_recall_results_1st_threshold
} else if (i == 2) {
BirdNET_recall_results_to_use <- BirdNET_recall_results_2nd_threshold
} else {
BirdNET_recall_results_to_use <- BirdNET_recall_results_3rd_threshold
}
if (algorithm == "Google") {
recall_results_by_species <- BirdNET_recall_results_to_use %>%
group_by(species) %>%
summarize(mean_confidence_in_correct_identifications = mean(mean_Google_confidence[mean_Google_confidence > 0]),
mean_id_recall = mean(proportion_of_time_detected),
mean_rec_recall = mean(as.numeric(detected_by_Google)),
total_manual_detections = n()) %>%
left_join(species_labels,
by = "species")
} else {
recall_results_by_species <- BirdNET_recall_results_to_use %>%
group_by(species) %>%
summarize(mean_confidence_in_correct_identifications = mean(mean_BirdNET_confidence[mean_BirdNET_confidence > 0]),
mean_id_recall = mean(proportion_of_time_detected),
mean_rec_recall = mean(as.numeric(detected_by_BirdNET)),
total_manual_detections = n()) %>%
left_join(species_labels,
by = "species")
}
recall_results_by_species[is.na(recall_results_by_species)] = 0
recall_and_precision_results_by_species <- recall_results_by_species %>%
left_join(precision_results_by_species,
by = "species") %>%
left_join(total_birds_detected %>%
select(species, total_time, label),
by = c("species", "label")) %>%
mutate(total_time = case_when(is.na(total_time) ~ 0,
TRUE ~ total_time),
original_time = total_time,
total_time = log2(total_time))
recall_and_precision_results_by_species[is.na(recall_and_precision_results_by_species)] = 0
jpeg(file = paste0(R_plots_path, "/", algorithm, " precision and recall analysis/recall_(proportion_of_recordings_where_detected)_by_precision.jpeg"), width = 3300, height = 2400, res = 500)
ggplot(recall_and_precision_results_by_species, aes(x=mean_id_precision, y=mean_rec_recall, label=label)) +
geom_point() +
geom_text_repel(size = 2.5,
nudge_y = 0.02) +
geom_smooth(method=lm, se=TRUE) +
xlab("Mean id_precision") +
ylab("Mean rec_recall") +
ggtitle(paste0(algorithm, " rec_recall by precision"))
dev.off()
jpeg(file = paste0(R_plots_path, "/", algorithm, " precision and recall analysis/recall_(proportion_of_time_detected)_by_precision.jpeg"), width = 3300, height = 2400, res = 500)
ggplot(recall_and_precision_results_by_species, aes(x=mean_id_precision, y=mean_id_recall, label=label)) +
geom_point() +
geom_text_repel(size = 2.5,
nudge_y = 0.02) +
geom_smooth(method=lm, se=TRUE) +
xlab("Mean id_precision") +
ylab("Mean id_recall") +
ggtitle(paste0(algorithm, " id_recall by precision"))
dev.off()
jpeg(file = paste0(R_plots_path, "/", algorithm, " precision and recall analysis/recall_(proportion_of_recordings_where_detected)_by_precision_only_species_with_at_least_10_detections.jpeg"), width = 3300, height = 2400, res = 500)
ggplot(recall_and_precision_results_by_species %>%
filter(total_detections >= 10), aes(x=mean_id_precision, y=mean_rec_recall, label=label)) +
geom_point() +
geom_text_repel(size = 2.5,
nudge_y = 0.02) +
geom_smooth(method=lm, se=TRUE) +
xlab("Mean id_precision") +
ylab("Mean rec_recall") +
ggtitle(paste0(algorithm, " rec_recall by precision \n(only species with ≥10 detections)"))
dev.off()
jpeg(file = paste0(R_plots_path, "/", algorithm, " precision and recall analysis/recall_(proportion_of_time_detected)_by_precision_only_species_with_at_least_10_detections.jpeg"), width = 3300, height = 2400, res = 500)
ggplot(recall_and_precision_results_by_species %>%
filter(total_detections >= 10), aes(x=mean_id_precision, y=mean_id_recall, label=label)) +
geom_point() +
geom_text_repel(size = 2.5,
nudge_y = 0.02) +
geom_smooth(method=lm, se=TRUE) +
xlab("Mean id_precision") +
ylab("Mean id_recall") +
ggtitle(paste0(algorithm, " id_recall by precision \n(only species with ≥10 detections)"))
dev.off()
BirdNET_PR_results_by_species_and_selected_conf_levels <- BirdNET_PR_results_by_species %>%
filter(confidence_threshold == confidence_levels[i],
TP + FP + FN > 0) %>%
select(species, confidence_threshold, TP, FP, FN) %>%
mutate(total_identifications = TP + FP + FN) %>%
arrange((TP / (TP + FN + FP)), -FP / (TP + FN + FP), -FP, -FN) %>%
mutate(species_order = row_number())
tps <- melt(setDT(BirdNET_PR_results_by_species_and_selected_conf_levels %>%
select(species, TP)), id.vars = "species", variable.name = "identification_type", value.name = "n_identifications")
fps <- melt(setDT(BirdNET_PR_results_by_species_and_selected_conf_levels %>%
select(species, FP)), id.vars = "species", variable.name = "identification_type", value.name = "n_identifications")
fns <- melt(setDT(BirdNET_PR_results_by_species_and_selected_conf_levels %>%
select(species, FN)), id.vars = "species", variable.name = "identification_type", value.name = "n_identifications")
identification_types_by_species <- union_all(union_all(tps, fps), fns) %>%
arrange(species, desc(identification_type)) %>%
left_join(BirdNET_PR_results_by_species_and_selected_conf_levels %>%
select(species, total_identifications, species_order),
by = "species") %>%
mutate(share = n_identifications / total_identifications,
identification_type = as.factor(case_when(identification_type == "FN" ~ "False negative",
identification_type == "FP" ~ "False positive",
TRUE ~ "True positive")))
factor_order <- c("False negative", "False positive", "True positive")
identification_types_by_species$identification_type <- factor(identification_types_by_species$identification_type, levels=factor_order)
plot_width <- case_when(i == 1 ~ 12000,
i == 2 ~ 12000,
i == 3 ~ 12000)
# Bar plot showing the proportion of each identification type for each species either present in the recordings or detected by BirdNET
jpeg(file = paste0(R_plots_path, "/", algorithm, " precision and recall analysis/", algorithm, "_identifications_by_type_and_species_", confidence_labels[i], ".jpeg"), width = plot_width, height = 2800, res = 500)
ggplot(identification_types_by_species, aes(fill = identification_type, y = share, x = reorder(species, species_order))) +
geom_bar(position = "fill", stat = "identity") +
geom_text(data = subset(identification_types_by_species, n_identifications != 0),
aes(x = species, y = share, label = n_identifications, group = identification_type),
position = position_stack(vjust = .5),
stat = "identity") +
ylab("Proportion of detections") +
xlab("Species") +
labs(fill = "Identification type") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, face = "italic"),
panel.background = element_blank()) +
scale_fill_manual(values = c("#FFCC33", "#ED195C", "#0099D7")) +
ggtitle(paste0(algorithm, " results by species — only identifications", confidence_plot_titles[i]))
dev.off()
identification_types_by_selected_species <- identification_types_by_species %>%
filter(total_identifications >= 10)
identification_types_by_species_sum <- identification_types_by_species %>%
group_by(identification_type) %>%
summarize(total = sum(n_identifications))
identification_types_by_selected_species_sum <- identification_types_by_selected_species %>%
group_by(identification_type) %>%
summarize(total = sum(n_identifications))
all_species_tp <- (identification_types_by_species_sum %>%
filter(identification_type == "True positive") %>%
select(total))$total
all_species_fp <- (identification_types_by_species_sum %>%
filter(identification_type == "False positive") %>%
select(total))$total
all_species_fn <- (identification_types_by_species_sum %>%
filter(identification_type == "False negative") %>%
select(total))$total
selected_species_tp <- (identification_types_by_selected_species_sum %>%
filter(identification_type == "True positive") %>%
select(total))$total
selected_species_fp <- (identification_types_by_selected_species_sum %>%
filter(identification_type == "False positive") %>%
select(total))$total
selected_species_fn <- (identification_types_by_selected_species_sum %>%
filter(identification_type == "False negative") %>%
select(total))$total
all_species_rec_precision <- all_species_tp / (all_species_tp + all_species_fp)
all_species_rec_recall <- all_species_tp / (all_species_tp + all_species_fn)
selected_species_rec_precision <- selected_species_tp / (selected_species_tp + selected_species_fp)
selected_species_rec_recall <- selected_species_tp / (selected_species_tp + selected_species_fn)
jpeg(file = paste0(R_plots_path, "/", algorithm, " precision and recall analysis/", algorithm, "_identifications_by_type_and_species_at_least_in_10_recordings.jpeg"), width = plot_width, height = 2600, res = 500)
ggplot(identification_types_by_selected_species, aes(fill = identification_type, y = share, x = reorder(species, species_order))) +
geom_bar(position = "fill", stat = "identity") +
geom_text(data = subset(identification_types_by_selected_species, n_identifications != 0),
aes(x = species, y = share, label = n_identifications, group = identification_type),
position = position_stack(vjust = .5),
stat = "identity") +
ylab("Proportion of detections") +
xlab("Species") +
labs(fill = "Identification type") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, face = "italic"),
panel.background = element_blank()) +
scale_fill_manual(values = c("#FFCC33", "#ED195C", "#0099D7")) +
ggtitle(paste0(algorithm, " results by species", filtered_label, overlap_label, ds_label, " — only identifications", confidence_plot_titles[i], " and species with ≥10 detections"))
dev.off()
