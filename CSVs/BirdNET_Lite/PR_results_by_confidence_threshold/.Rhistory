code_n_ind == 2 ~ "2 birds of the same species",
code_n_ind == 3 ~ ">2 birds of the same species",
TRUE ~ "≥2 birds of different species")) %>%
group_by(n_ind_label, species) %>%
summarize(mean_confidence_in_correct_identifications = mean(BirdNET_confidence),
mean_proportion_of_time_detected = mean(proportion_of_time_detected),
mean_recall = mean(as.numeric(proportion_of_time_detected > 0)))
recall_results_by_n_ind$n_ind_label <- factor(recall_results_by_n_ind$n_ind_label , levels=c("1 bird", "2 birds of the same species", ">2 birds of the same species", "≥2 birds of different species"))
jpeg(file = paste0("../R plots/BirdNET_", BirdNET_version, "/BirdNET recall analysis/recall_by_number_of_birds_singing.jpeg"), width = 4000, height = 3000, res = 500)
ggplot(recall_results_by_n_ind, aes(x = n_ind_label, y = mean_proportion_of_time_detected, fill = n_ind_label)) +
geom_boxplot() +
xlab("Number of birds vocalizing at the same time") +
ylab("Mean recall") +
ggtitle("BirdNET recall by number of birds vocalizing at the same time") +
theme_bw() +
theme(legend.position = "none") +
scale_fill_manual(values = c("#84B8E1", "#84B8E1", "#84B8E1", "#84B8E1"))
dev.off()
# Checking the normality of the distribution of the recall variable to determine whether we can perform an ANOVA analysis or not
shapiro.test(recall_results_by_n_ind$mean_proportion_of_time_detected)
hist(recall_results_by_n_ind$mean_proportion_of_time_detected)
# The distribution of recall values is not normal. Therefore, we have to transform it before we can perform the ANOVA analysis.
# Nonetheless, neither sqrt nor logarithmic transformations transform the recall distribution into normal ones.
# Thus, a Kruskal-Wallis test will have to be performed insted of an ANOVA.
kruskal.test(mean_proportion_of_time_detected ~ n_ind_label, data = recall_results_by_n_ind)
# The potential influence of the number of birds singing at the same time on recall results is not high enough to be considered significant.
# Analyses with different confidence thresholds
confidence_levels <- c(0.15, 0.55, 0.85)
confidence_labels <- c("15", "55", "85")
confidence_plot_titles <- c(" with confidence level ≥ 0.15", " with confidence level ≥ 0.55", " with confidence level ≥ 0.85")
confidence_plot_widths <- c(6500, 6500, 6500)
BirdNET_PR_results_by_species <- read.csv(paste0("../CSVs/BirdNET_", BirdNET_version, "/BirdNET_PR_results_by_species.csv"))
for (i in 1:length(confidence_levels)) {
#--------------------------Precision and recall analysis-------------------
precision_results_by_species <- BirdNET_precision_results %>%
filter(confidence >= confidence_levels[i]) %>%
mutate(species = as.factor(species),
precision = as.numeric(correct_identification)) %>%
group_by(species) %>%
summarise(mean_precision = mean(precision),
total_detections = n()) %>%
arrange(mean_precision)
if (i == 2) {
recall_results_by_species <- BirdNET_recall_results_55 %>%
group_by(species) %>%
summarize(mean_confidence_in_correct_identifications = mean(mean_BirdNET_confidence[mean_BirdNET_confidence > 0]),
mean_proportion_of_time_detected = mean(proportion_of_time_detected),
mean_recall = mean(as.numeric(detected_by_BirdNET))) %>%
left_join(species_labels,
by = "species")
recall_results_by_species[is.na(recall_results_by_species)] = 0
}  else if (i == 3) {
recall_results_by_species <- BirdNET_recall_results_85 %>%
group_by(species) %>%
summarize(mean_confidence_in_correct_identifications = mean(mean_BirdNET_confidence[mean_BirdNET_confidence > 0]),
mean_proportion_of_time_detected = mean(proportion_of_time_detected),
mean_recall = mean(as.numeric(detected_by_BirdNET))) %>%
left_join(species_labels,
by = "species")
recall_results_by_species[is.na(recall_results_by_species)] = 0
}
recall_and_precision_results_by_species <- recall_results_by_species %>%
left_join(precision_results_by_species,
by = "species") %>%
left_join(total_birds_detected %>%
select(species, total_time, label),
by = c("species", "label")) %>%
mutate(total_time = case_when(is.na(total_time) ~ 0,
TRUE ~ total_time),
original_time = total_time,
total_time = log2(total_time))
recall_and_precision_results_by_species[is.na(recall_and_precision_results_by_species)] = 0
if (i == 1) {
jpeg(file = paste0("../R plots/BirdNET_", BirdNET_version, "/BirdNET precision and recall analysis/recall_(proportion_of_recordings_where_detected)_by_precision.jpeg"), width = 3300, height = 2400, res = 500)
ggplot(recall_and_precision_results_by_species, aes(x=mean_precision, y=mean_recall, label=label)) +
geom_point() +
geom_text_repel(size = 2.5,
nudge_y = 0.02) +
geom_smooth(method=lm, se=TRUE) +
xlab("Mean precision") +
ylab("Mean recall") +
ggtitle("BirdNET recall (proportion of recordings where a species \nis correctly detected) by precision")
dev.off()
jpeg(file = paste0("../R plots/BirdNET_", BirdNET_version, "/BirdNET precision and recall analysis/recall_(proportion_of_time_detected)_by_precision.jpeg"), width = 3300, height = 2400, res = 500)
ggplot(recall_and_precision_results_by_species, aes(x=mean_precision, y=mean_proportion_of_time_detected, label=label)) +
geom_point() +
geom_text_repel(size = 2.5,
nudge_y = 0.02) +
geom_smooth(method=lm, se=TRUE) +
xlab("Mean precision") +
ylab("Mean recall") +
ggtitle("BirdNET recall (proportion of time \ncorrectly detected per species) by precision")
dev.off()
jpeg(file = paste0("../R plots/BirdNET_", BirdNET_version, "/BirdNET precision and recall analysis/recall_(proportion_of_recordings_where_detected)_by_precision_only_species_with_at_least_10_detections.jpeg"), width = 3300, height = 2400, res = 500)
ggplot(recall_and_precision_results_by_species %>%
filter(total_detections >= 10), aes(x=mean_precision, y=mean_recall, label=label)) +
geom_point() +
geom_text_repel(size = 2.5,
nudge_y = 0.02) +
geom_smooth(method=lm, se=TRUE) +
xlab("Mean precision") +
ylab("Mean recall") +
ggtitle("BirdNET recall (proportion of recordings where a species \nis correctly detected) by precision \n(only species with ≥10 detections)")
dev.off()
jpeg(file = paste0("../R plots/BirdNET_", BirdNET_version, "/BirdNET precision and recall analysis/recall_(proportion_of_time_detected)_by_precision_only_species_with_at_least_10_detections.jpeg"), width = 3300, height = 2400, res = 500)
ggplot(recall_and_precision_results_by_species %>%
filter(total_detections >= 10), aes(x=mean_precision, y=mean_proportion_of_time_detected, label=label)) +
geom_point() +
geom_text_repel(size = 2.5,
nudge_y = 0.02) +
geom_smooth(method=lm, se=TRUE) +
xlab("Mean precision") +
ylab("Mean recall") +
ggtitle("BirdNET recall (proportion of time \ncorrectly detected per species) by precision \n(only species with ≥10 detections)")
dev.off()
}
#-------------------------- Identification type analysis ----------------------
BirdNET_PR_results_by_species_and_selected_conf_levels <- BirdNET_PR_results_by_species %>%
filter(confidence_threshold == confidence_levels[i],
TP + FP + FN > 0) %>%
select(species, confidence_threshold, TP, FP, FN) %>%
mutate(total_identifications = TP + FP + FN)
tps <- melt(setDT(BirdNET_PR_results_by_species_and_selected_conf_levels %>%
select(species, TP)), id.vars = "species", variable.name = "identification_type", value.name = "n_identifications")
fps <- melt(setDT(BirdNET_PR_results_by_species_and_selected_conf_levels %>%
select(species, FP)), id.vars = "species", variable.name = "identification_type", value.name = "n_identifications")
fns <- melt(setDT(BirdNET_PR_results_by_species_and_selected_conf_levels %>%
select(species, FN)), id.vars = "species", variable.name = "identification_type", value.name = "n_identifications")
identification_types_by_species <- union_all(union_all(tps, fps), fns) %>%
arrange(species, desc(identification_type)) %>%
left_join(BirdNET_PR_results_by_species_and_selected_conf_levels %>%
select(species, total_identifications),
by = "species") %>%
mutate(share = n_identifications / total_identifications,
identification_type = as.factor(case_when(identification_type == "FN" ~ "False negative",
identification_type == "FP" ~ "False positive",
TRUE ~ "True positive")))
factor_order <- c("False negative", "False positive", "True positive")
identification_types_by_species$identification_type <- factor(identification_types_by_species$identification_type, levels=factor_order)
plot_width <- case_when(i == 1 ~ 8000,
i == 2 ~ 8000,
i == 3 ~ 8000)
# Bar plot showing the proportion of each identification type for each species either present in the recordings or detected by BirdNET
jpeg(file = paste0("../R plots/BirdNET_", BirdNET_version, "/BirdNET precision and recall analysis/BirdNET_identifications_by_type_and_species_", confidence_labels[i], ".jpeg"), width = plot_width, height = 2400, res = 500)
ggplot(identification_types_by_species, aes(fill = identification_type, y = share, x = species)) +
geom_bar(position = "fill", stat = "identity") +
geom_text(data = subset(identification_types_by_species, n_identifications != 0),
aes(x = species, y = share, label = n_identifications, group = identification_type),
position = position_stack(vjust = .5),
stat = "identity") +
ylab("Frequency") +
xlab("Species") +
labs(fill = "Identification type") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
panel.background = element_blank()) +
scale_fill_manual(values = c("#FFCC33", "#ED195C", "#0099D7")) +
ggtitle(paste0("BirdNET results by species — only identifications", confidence_plot_titles[i]))
dev.off()
if (i == 1) {
identification_types_by_selected_species <- identification_types_by_species %>%
filter(total_identifications >= 10)
jpeg(file = paste0("../R plots/BirdNET_", BirdNET_version, "/BirdNET precision and recall analysis/BirdNET_identifications_by_type_and_species_at_least_in_10_recordings.jpeg"), width = plot_width, height = 2400, res = 500)
ggplot(identification_types_by_selected_species, aes(fill = identification_type, y = share, x = species)) +
geom_bar(position = "fill", stat = "identity") +
geom_text(data = subset(identification_types_by_selected_species, n_identifications != 0),
aes(x = species, y = share, label = n_identifications, group = identification_type),
position = position_stack(vjust = .5),
stat = "identity") +
ylab("Frequency") +
xlab("Species") +
labs(fill = "Identification type") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
panel.background = element_blank()) +
scale_fill_manual(values = c("#FFCC33", "#ED195C", "#0099D7")) +
ggtitle(paste0("BirdNET results by species — only identifications", confidence_plot_titles[i], " and species with ≥10 detections"))
dev.off()
}
#--------------------------Precision analysis-----------------------------------
# Plotting BirdNET precision by species
jpeg(file = paste0("../R plots/BirdNET_", BirdNET_version, "/BirdNET precision analysis/precision_by_species_", confidence_labels[i], ".jpeg"), width = confidence_plot_widths[i], height = 2400, res = 500)
ggplot(precision_results_by_species, aes(x=reorder(species, mean_precision), y=mean_precision)) +
geom_bar(position = position_dodge(),
stat = "identity",
colour = 'black',
fill = "#759ED0") +
xlab("Species") +
ylab("Mean precision") +
ggtitle(paste0("Mean precision by bird species in BirdNET identifications", confidence_plot_titles[i])) +
theme_bw() +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
dev.off()
if (i == 1) {
# Plotting BirdNET precision by total singing/calling time
jpeg(file = paste0("../R plots/BirdNET_", BirdNET_version, "/BirdNET precision analysis/precision_by_total_time.jpeg"), width = 3300, height = 2400, res = 500)
ggplot(recall_and_precision_results_by_species, aes(x=total_time, y=mean_precision, label=label)) +
geom_point() +
geom_text_repel(size = 2.5,
nudge_y = 0.02) +
geom_smooth(method=lm, se=TRUE) +
xlab("Time (s), log2 scale") +
ylab("Mean precision") +
ggtitle("BirdNET precision by species total singing/calling time")
dev.off()
jpeg(file = paste0("../R plots/BirdNET_", BirdNET_version, "/BirdNET precision analysis/precision_by_total_time_(only_species_with_at_least_10_detections).jpeg"), width = 3300, height = 2400, res = 500)
ggplot(recall_and_precision_results_by_species %>%
filter(total_detections >= 10), aes(x=total_time, y=mean_precision, label=label)) +
geom_point() +
geom_text_repel(size = 2.5,
nudge_y = 0.02) +
geom_smooth(method=lm, se=TRUE) +
xlab("Time (s), log2 scale") +
ylab("Mean precision") +
ggtitle("BirdNET precision by species total singing/calling time \n(only species with ≥10 detections)")
dev.off()
if (i == 1) {
selected_recall_and_precision_results_by_species <- recall_and_precision_results_by_species %>%
filter(total_detections >= 10)
# Checking the normality of the precision distribution to determine whether we can perform a Pearson correlation analysis or not
shapiro.test(selected_recall_and_precision_results_by_species$mean_precision)
hist(selected_recall_and_precision_results_by_species$mean_precision)
shapiro.test(selected_recall_and_precision_results_by_species$total_time)
hist(selected_recall_and_precision_results_by_species$total_time)
# The distribution of total_time is normal, but the distribution of precision values is not.
# Therefore, we have to transform it before we can perform the Pearson's correlation analysis.
# Nonetheless, neither sqrt nor logarithmic nor 1/x transformations transform the precision distribution into a normal.
# Thus, a Spearman's correlation test will have to be performed insted of a Pearson's one.
cor.test(selected_recall_and_precision_results_by_species$total_time, selected_recall_and_precision_results_by_species$mean_precision, method = "spearman")
# Spearman's correlation coefficient is 0.778, with a p-value of 4.24e-07, which indicates that total singing time significantly influences precision results.
}
# Plotting BirdNET precision by species
jpeg(file = paste0("../R plots/BirdNET_", BirdNET_version, "/BirdNET precision analysis/precision_by_species_with_at_least_10_detections.jpeg"), width = confidence_plot_widths[2], height = 2400, res = 500)
ggplot(precision_results_by_species %>%
filter(total_detections >= 10), aes(x=reorder(species, mean_precision), y=mean_precision)) +
geom_bar(position=position_dodge(),
stat="identity",
colour='black',
fill = "#759ED0") +
xlab("Species") +
ylab("Mean precision") +
ggtitle("Mean precision by bird species in BirdNET identifications — only species with ≥10 detections") +
theme_bw() +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
dev.off()
}
#--------------------------Recall analysis-----------------------------------
# Plotting BirdNET recall by species
jpeg(file = paste0("../R plots/BirdNET_", BirdNET_version, "/BirdNET recall analysis/recall_(proportion_of_time_detected)_by_species_", confidence_labels[i], ".jpeg"), width = 5000, height = 2400, res = 500)
ggplot(recall_results_by_species, aes(x=reorder(species, mean_proportion_of_time_detected), y=mean_proportion_of_time_detected)) +
geom_bar(position=position_dodge(),
stat="identity",
colour='black') +
xlab("Species") +
ylab("Mean recall") +
ggtitle(paste0("Mean recall (proportion of time where correctly detected) by bird species", confidence_plot_titles[i])) +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
dev.off()
jpeg(file = paste0("../R plots/BirdNET_", BirdNET_version, "/BirdNET recall analysis/recall_(proportion_of_recordings_where_detected)_by_species_", confidence_labels[i], ".jpeg"), width = 6500, height = 2400, res = 500)
ggplot(recall_results_by_species, aes(x=reorder(species, mean_recall), y=mean_recall)) +
geom_bar(position=position_dodge(),
stat="identity",
colour='black',
fill = "#759ED0") +
xlab("Species") +
ylab("Mean recall") +
ggtitle(paste0("Mean BirdNET recall by bird species — only identifications", confidence_plot_titles[i])) +
theme_bw() +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
dev.off()
# Only species having sung or called at least 30 seconds
if (i == 1) {
# Plotting BirdNET recall by total singing/calling time
jpeg(file = paste0("../R plots/BirdNET_", BirdNET_version, "/BirdNET recall analysis/recall_by_total_time.jpeg"), width = 3300, height = 2400, res = 500)
ggplot(recall_and_precision_results_by_species, aes(x=total_time, y=mean_recall, label=label)) +
geom_point() +
geom_text_repel(size = 2.5,
nudge_y = 0.02) +
xlab("Time (s), log2 scale") +
ylab("Mean recall") +
ggtitle("BirdNET recall by species total singing/calling time")
dev.off()
recall_results_with_total_time_as_factor <- recall_and_precision_results_by_species %>%
mutate(time_factor = case_when(original_time < 10 ~ "0-10",
original_time >= 10 & original_time < 60 ~ "10-60",
original_time >= 60 & original_time < 500 ~ "60-500",
TRUE ~ "≥500"))
recall_results_with_total_time_as_factor$time_factor <- factor(recall_results_with_total_time_as_factor$time_factor,
levels=c("0-10", "10-60", "60-500", "≥500"))
jpeg(file = paste0("../R plots/BirdNET_", BirdNET_version, "/BirdNET recall analysis/recall_by_total_time_boxplot.jpeg"), width = 3300, height = 2400, res = 500)
ggplot(recall_results_with_total_time_as_factor, aes(x=time_factor, y=mean_recall)) +
geom_boxplot() +
xlab("Time (s)") +
ylab("Mean recall") +
ggtitle("BirdNET recall by species total singing/calling time")
dev.off()
recall_results_with_time_per_recording_as_factor <- recall_and_precision_results_by_species %>%
left_join(total_birds_detected %>%
select(species, n_recordings_clearly_detected),
by = "species") %>%
mutate(time_per_recording = original_time / n_recordings_clearly_detected,
time_per_recording_factor = case_when(time_per_recording < 5 ~ "<5",
time_per_recording >= 5 & time_per_recording < 10 ~ "5-10",
time_per_recording >= 10 & time_per_recording < 20 ~ "10-20",
TRUE ~ "≥20"))
recall_results_with_time_per_recording_as_factor$time_per_recording_factor <- factor(recall_results_with_time_per_recording_as_factor$time_per_recording_factor,
levels=c("<5", "5-10", "10-20", "≥20"))
jpeg(file = paste0("../R plots/BirdNET_", BirdNET_version, "/BirdNET recall analysis/recall_by_time_per_recording_boxplot.jpeg"), width = 3300, height = 2400, res = 500)
ggplot(recall_results_with_time_per_recording_as_factor, aes(x=time_per_recording_factor, y=mean_recall)) +
geom_boxplot() +
xlab("Time (s)") +
ylab("Mean recall") +
ggtitle("BirdNET recall by species average singing/calling time per recording")
dev.off()
jpeg(file = paste0("../R plots/BirdNET_", BirdNET_version, "/BirdNET recall analysis/recall_(proportion_of_time_detected)_by_species_with_at_least_30s.jpeg"), width = 4000, height = 2400, res = 500)
ggplot(recall_results_by_species_with_at_least_30s, aes(x=reorder(species, mean_proportion_of_time_detected), y=mean_proportion_of_time_detected)) +
geom_bar(position=position_dodge(),
stat="identity",
colour='black') +
xlab("Species") +
ylab("Mean recall") +
ggtitle("Mean recall (proportion of time where correctly detected) \nby bird species with ≥30 seconds of total time") +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
dev.off()
jpeg(file = paste0("../R plots/BirdNET_", BirdNET_version, "/BirdNET recall analysis/recall_(proportion_of_recordings_where_detected)_by_species_with_at_least_30s.jpeg"), width = 6500, height = 2400, res = 500)
ggplot(recall_results_by_species_with_at_least_30s, aes(x=reorder(species, mean_recall), y=mean_recall)) +
geom_bar(position=position_dodge(),
stat="identity",
colour='black',
fill = "#759ED0") +
xlab("Species") +
ylab("Mean recall") +
ggtitle(paste0("Mean BirdNET recall by bird species with ≥30 seconds of total vocalization time — only identifications", confidence_plot_titles[1])) +
theme_bw() +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
dev.off()
}
}
#--------------Global detection results by confidence threshold-----------------
annotations <- read.csv("../CSVs/annotations.csv")
recordings <- read.csv("../CSVs/recordings_extended.csv")
for (i in 1:length(confidence_levels)) {
temp_global_detection_results <- BirdNET_precision_results %>%
filter(confidence >= confidence_levels[i]) %>%
group_by(recording_id, species) %>%
summarize(correct_identifications = sum(as.numeric(correct_identification)),
incorrect_identifications = sum(as.numeric(!correct_identification))) %>%
mutate(correct_identifications = case_when(correct_identifications > 0 ~ 1,
TRUE ~ 0),
incorrect_identifications = case_when(incorrect_identifications > 0 ~ 1,
TRUE ~ 0)) %>%
group_by(species) %>%
summarize(recordings_where_correctly_identified = sum(correct_identifications),
recordings_where_incorrectly_identified = sum(incorrect_identifications))
temp_detection_results_by_habitat <- BirdNET_precision_results %>%
left_join(recordings %>%
select(recording_id, habitat),
by = "recording_id") %>%
filter(confidence >= confidence_levels[i]) %>%
group_by(habitat, species) %>%
summarize(correct_identifications = sum(as.numeric(correct_identification)),
incorrect_identifications = sum(as.numeric(!correct_identification))) %>%
mutate(correct_identifications = case_when(correct_identifications > 0 ~ 1,
TRUE ~ 0),
incorrect_identifications = case_when(incorrect_identifications > 0 ~ 1,
TRUE ~ 0)) %>%
group_by(habitat) %>%
summarize(correctly_identified_species = sum(correct_identifications),
incorrectly_identified_species = sum(incorrect_identifications))
if (i == 1) {
global_BirdNET_detection_results_15 <- temp_global_detection_results
BirdNET_detection_results_by_habitat_15 <- temp_detection_results_by_habitat
} else if (i == 2) {
global_BirdNET_detection_results_55 <- temp_global_detection_results
BirdNET_detection_results_by_habitat_55 <- temp_detection_results_by_habitat
} else {
global_BirdNET_detection_results_85 <- temp_global_detection_results
BirdNET_detection_results_by_habitat_85 <- temp_detection_results_by_habitat
}
}
global_detection_results <- total_birds_detected %>%
filter(species != "Unidentified bird") %>%
select(species, n_recordings_clearly_detected) %>%
full_join(global_BirdNET_detection_results_15,
by = "species") %>%
rename("correctly_identified_15" = "recordings_where_correctly_identified",
"incorrectly_identified_15" = "recordings_where_incorrectly_identified") %>%
full_join(global_BirdNET_detection_results_55,
by = "species") %>%
rename("correctly_identified_55" = "recordings_where_correctly_identified",
"incorrectly_identified_55" = "recordings_where_incorrectly_identified") %>%
full_join(global_BirdNET_detection_results_85,
by = "species") %>%
rename("correctly_identified_85" = "recordings_where_correctly_identified",
"incorrectly_identified_85" = "recordings_where_incorrectly_identified") %>%
arrange(species)
global_detection_results[is.na(global_detection_results)] <- 0
global_detection_results <- global_detection_results %>%
mutate(non_present_species_15 = as.numeric(n_recordings_clearly_detected == 0 & incorrectly_identified_15 > 0) * incorrectly_identified_15,
non_present_species_55 = as.numeric(n_recordings_clearly_detected == 0 & incorrectly_identified_55 > 0) * incorrectly_identified_55,
non_present_species_85 = as.numeric(n_recordings_clearly_detected == 0 & incorrectly_identified_85 > 0) * incorrectly_identified_85)
global_detection_results <- rbind(global_detection_results, c("Total detections",
sum(global_detection_results$n_recordings_clearly_detected),
sum(global_detection_results$correctly_identified_15),
sum(global_detection_results$incorrectly_identified_15),
sum(global_detection_results$correctly_identified_55),
sum(global_detection_results$incorrectly_identified_55),
sum(global_detection_results$correctly_identified_85),
sum(global_detection_results$incorrectly_identified_85),
sum(global_detection_results$non_present_species_15),
sum(global_detection_results$non_present_species_55),
sum(global_detection_results$non_present_species_85)))
global_detection_results <- rbind(global_detection_results, c("Total species",
sum(as.numeric(global_detection_results$n_recordings_clearly_detected > 0)) - 1,
sum(as.numeric(global_detection_results$correctly_identified_15 > 0)) - 1,
sum(as.numeric(global_detection_results$incorrectly_identified_15 > 0)) - 1,
sum(as.numeric(global_detection_results$correctly_identified_55 > 0)) - 1,
sum(as.numeric(global_detection_results$incorrectly_identified_55 > 0)) - 1,
sum(as.numeric(global_detection_results$correctly_identified_85 > 0)) - 1,
sum(as.numeric(global_detection_results$incorrectly_identified_85 > 0)) - 1,
sum(as.numeric(global_detection_results$non_present_species_15 > 0)) - 1,
sum(as.numeric(global_detection_results$non_present_species_55 > 0)) - 1,
sum(as.numeric(global_detection_results$non_present_species_85 > 0)) - 1))
global_detection_results_file_name <- file.path(paste0("../CSVs/BirdNET_", BirdNET_version), "global_detection_results.csv")
write.csv(x=global_detection_results, file=global_detection_results_file_name, row.names = FALSE)
#-------------Global detection results by time of day and habitat---------------
bird_species_richness_by_recording_and_time <- annotations %>%
left_join(recordings, by = "recording_id") %>%
filter(confidence_level == 1, sound_type == "Bird") %>%
select(recording_id, recording_date, recording_time, label) %>%
unique() %>%
group_by(recording_id, recording_date, recording_time) %>%
summarize(n_bird_species = n())
bird_species_richness_by_time <- bird_species_richness_by_recording_and_time %>%
group_by(recording_time) %>%
summarize(mean_richness = mean(n_bird_species))
jpeg(file = "../R plots/Annotation analysis/number_of_species_detected_by_time_of_the_day.jpeg", width = 3000, height = 2400, res = 500)
ggplot(bird_species_richness_by_recording_and_time, aes(x = as.factor(recording_time), y = n_bird_species, fill = as.factor(recording_time))) +
geom_boxplot() +
xlab("Time of the day") +
ylab("Bird species detected") +
ggtitle("Bird species detected per minute by time of the day") +
theme_bw() +
theme(legend.position = "none") +
scale_fill_manual(values = c("#84B8E1", "#84B8E1", "#84B8E1"))
dev.off()
# Checking the normality of the distribution of the number of species detected per recording to determine whether we can perform an ANOVA analysis or not
shapiro.test(bird_species_richness_by_recording_and_time$n_bird_species)
hist(bird_species_richness_by_recording_and_time$n_bird_species)
# The distribution of the number of species per recording is not normal. Therefore, we have to transform the data before we can perform the ANOVA analysis.
# Nonetheless, neither sqrt nor logarithmic transformations transform the distribution into a normal one.
# Thus, a Kruskal-Wallis test will have to be performed insted of an ANOVA.
kruskal.test(n_bird_species ~ recording_time, data = bird_species_richness_by_recording_and_time)
View(bird_species_richness_by_recording_and_time)
View(bird_species_richness_by_recording_and_time)
bird_species_richness_by_recording_and_time %>%
filter(recording_time) == "07:00:00"
bird_species_richness_by_recording_and_time %>%
filter(recording_time == "07:00:00")
t.test(bird_species_richness_by_recording_and_time %>%
filter(recording_time == "07:00:00"),
bird_species_richness_by_recording_and_time %>%
filter(recording_time == "13:00:00"))
bird_species_richness_by_recording_and_time %>%
filter(recording_time == "07:00:00")
t.test((bird_species_richness_by_recording_and_time %>%
filter(recording_time == "07:00:00"))$n_bird_species,
(bird_species_richness_by_recording_and_time %>%
filter(recording_time == "13:00:00"))$n_bird_species)
t.test((bird_species_richness_by_recording_and_time %>%
filter(recording_time == "07:00:00"))$n_bird_species,
(bird_species_richness_by_recording_and_time %>%
filter(recording_time == "00:00:00"))$n_bird_species)
library(ggrepel)
library(dplyr)
library(ggplot2)
library("viridis")
library('data.table')
library(pracma)
library("ggpubr")
#BirdNET_version <- "Lite"
BirdNET_version <- "Analyzer"
#---------------------------Confidence analysis---------------------------------
BirdNET_precision_results <- read.csv(paste0("../CSVs/BirdNET_", BirdNET_version, "/BirdNET_precision_results.csv"))
precision_results_by_species <- BirdNET_precision_results %>%
group_by(species, correct_identification) %>%
summarize(mean_confidence = mean(confidence),
n_identifications = n())
precision_by_confidence_level <- precision_results_by_species %>%
group_by(correct_identification) %>%
summarize(mean_confidence = mean(mean_confidence))
correctly_identified_species <- precision_results_by_species %>%
filter(correct_identification == TRUE) %>%
select(species) %>%
unique()
precision_by_confidence_level_in_detected_species <- precision_results_by_species %>%
filter(species %in% correctly_identified_species$species) %>%
group_by(correct_identification) %>%
summarize(mean_confidence = mean(mean_confidence))
# Checking the normality of the distribution of the number of species detected per recording to determine whether we can perform an ANOVA analysis or not
shapiro.test(BirdNET_precision_results$confidence)
hist(BirdNET_precision_results$confidence)
hist(sqrt(BirdNET_precision_results$confidence))
# Checking the normality of the distribution of the number of species detected per recording to determine whether we can perform an ANOVA analysis or not
shapiro.test(sqrt(BirdNET_precision_results$confidence))
hist(log2(BirdNET_precision_results$confidence))
# Checking the normality of the distribution of the number of species detected per recording to determine whether we can perform an ANOVA analysis or not
shapiro.test(log2(BirdNET_precision_results$confidence))
hist(log10(BirdNET_precision_results$confidence))
# Checking the normality of the distribution of the number of species detected per recording to determine whether we can perform an ANOVA analysis or not
shapiro.test(log10(BirdNET_precision_results$confidence))
hist(1/(BirdNET_precision_results$confidence))
kruskal.test(confidence ~ correct_identification, data = BirdNET_precision_results)
source("~/Escriptori/Màster Ecologia/TFM/R scripts/compile_PR_results.R", echo=TRUE)
