BirdNET_PR_results_by_recording[is.na(BirdNET_PR_results_by_recording)] = 0
BirdNET_PR_results_by_recording_and_habitat <- BirdNET_PR_results_by_recording %>%
mutate(confidence_threshold = as.numeric(confidence_threshold)) %>%
left_join(recording_info_extended %>%
select(recording_id, habitat),
by = "recording_id") %>%
left_join(recording_acoustic_data %>%
select(recording_id, NDSI_left),
by = "recording_id")
pr_auc_by_recording <- data.frame()
for (i in 1:nrow(recordings)) {
BirdNET_PR_results_by_selected_recording <- BirdNET_PR_results_by_recording_and_habitat %>%
filter(recording_id == recordings[i,]$recording_id)
pr_auc <- abs(trapz(BirdNET_PR_results_by_selected_recording$precision, BirdNET_PR_results_by_selected_recording$recall))
pr_auc_by_recording <- rbind(pr_auc_by_recording, c(recordings[i,]$recording_id, pr_auc))
}
colnames(pr_auc_by_recording) <- c("recording_id", "AUC")
BirdNET_PR_results_by_recording_and_habitat <- BirdNET_PR_results_by_recording_and_habitat %>%
left_join(pr_auc_by_recording,
by = "recording_id") %>%
mutate(habitat = as.factor(habitat)) %>%
select(recording_id, habitat, NDSI_left, recall, precision) %>%
group_by(recording_id, habitat, NDSI_left) %>%
summarize(recall = mean(recall),
precision = mean(precision)) %>%
ungroup()
# Checking the normality of the distribution of the recall and precision variables to determine whether we can perform an ANOVA analysis or not
shapiro.test(BirdNET_PR_results_by_recording_and_habitat$recall)
hist(BirdNET_PR_results_by_recording_and_habitat$recall)
shapiro.test(BirdNET_PR_results_by_recording_and_habitat$precision)
hist(BirdNET_PR_results_by_recording_and_habitat$precision)
# The distribution of recall and precision values is not normal. Therefore, we have to transform them before we can perform the ANOVA analysis.
# Nonetheless, neither sqrt nor logarithmic transformations transform the recall and precision distributions into normal ones.
# Thus, a Kruskal-Wallis test will have to be performed insted of an ANOVA.
kruskal.test(recall ~ habitat, data = BirdNET_PR_results_by_recording_and_habitat)
kruskal.test(precision ~ habitat, data = BirdNET_PR_results_by_recording_and_habitat)
# Habitat does not seem to have a significant impact on neither recall nor precision.
BirdNET_recall_results_by_recording <- melt(setDT(BirdNET_PR_results_by_recording_and_habitat %>%
select(recording_id, recall)), id.vars = "recording_id", variable.name = "metric", value.name = "value")
BirdNET_precision_results_by_recording <- melt(setDT(BirdNET_PR_results_by_recording_and_habitat %>%
select(recording_id, precision)), id.vars = "recording_id", variable.name = "metric", value.name = "value")
BirdNET_recall_and_precision_results_by_habitat <- union_all(BirdNET_recall_results_by_recording, BirdNET_precision_results_by_recording) %>%
left_join(BirdNET_PR_results_by_recording_and_habitat %>%
select(recording_id, habitat),
by = "recording_id")
jpeg(file = paste0("../R plots/BirdNET_", BirdNET_version, filtered_text, overlap_text, "/BirdNET precision and recall analysis/precision_and_recall_by_habitat.jpeg"), width = 3000, height = 2400, res = 500)
ggplot(BirdNET_recall_and_precision_results_by_habitat, aes(x = habitat, y = value, fill = metric)) +
geom_boxplot() +
xlab("Habitat") +
ylab("Value") +
labs(fill = "Metric") +
ggtitle("Precision and recall distributions by dominant habitat") +
theme_bw() +
scale_fill_manual(values = c("#E4959C", "#95B5DA"))
dev.off()
# Checking the normality of the NDSI index distribution to determine whether we can perform a Pearson correlation analysis or not
shapiro.test(BirdNET_PR_results_by_recording_and_habitat$NDSI_left)
hist(BirdNET_PR_results_by_recording_and_habitat$NDSI_left)
# The distribution of NDSI, recall and precision values is not normal.
# Therefore, we have to transform them before we can perform the Pearson's correlation analysis.
# Nonetheless, neither sqrt nor logarithmic transformations transform the NDSI, recall or precision distributions into normal ones.
# Thus, a Spearman's correlation test will have to be performed insted of a Pearson's one.
# The NDSI index has a significant influence on the precision of the algorithm (r = 0.218, p-value = 0.003)
cor.test(BirdNET_PR_results_by_recording_and_habitat$NDSI_left, BirdNET_PR_results_by_recording_and_habitat$precision, method = "spearman")
# The NDSI index has a significant influence on the recall of the algorithm (r = 0.178, p-value = 0.002)
cor.test(BirdNET_PR_results_by_recording_and_habitat$NDSI_left, BirdNET_PR_results_by_recording_and_habitat$recall, method = "spearman")
jpeg(file = paste0("../R plots/BirdNET_", BirdNET_version, filtered_text, overlap_text, "/BirdNET precision analysis/precision_by_anthropic_noise.jpeg"), width = 3200, height = 2500, res = 500)
ggplot(BirdNET_PR_results_by_recording_and_habitat, aes(x=NDSI_left, y=precision)) +
geom_point(color = "black") +
geom_smooth(method = lm, se = FALSE) +
xlab("NDSI score") +
ylab("Precision") +
ggtitle("BirdNET precision by NDSI score") +
theme(panel.background = element_blank(),
axis.line = element_line())
dev.off()
jpeg(file = paste0("../R plots/BirdNET_", BirdNET_version, filtered_text, overlap_text, "/BirdNET recall analysis/recall_by_anthropic_noise.jpeg"), width = 3200, height = 2500, res = 500)
ggplot(BirdNET_PR_results_by_recording_and_habitat, aes(x=NDSI_left, y=recall)) +
geom_point(color = "black") +
geom_smooth(method = lm, se = FALSE) +
xlab("NDSI score") +
ylab("Recall") +
ggtitle("BirdNET recall by NDSI score") +
theme(panel.background = element_blank(),
axis.line = element_line())
dev.off()
# ------------------------Recall by sample size analysis------------------------
global_detection_results <- read.csv(paste0("../CSVs/BirdNET_", BirdNET_version, filtered_text, overlap_text, "/global_detection_results_by_recording_subset.csv"))
grouped_global_detection_results <- global_detection_results %>%
group_by(n_recordings_sampled, minimum_confidence_threshold) %>%
summarize(mean_n_species_correctly_detected = mean(n_species_correctly_detected),
mean_n_species_incorrectly_detected = mean(n_species_incorrectly_detected),
mean_total_species_detected = mean(total_species_detected)) %>%
mutate(proportion_of_species_correctly_detected = mean_n_species_correctly_detected/mean_total_species_detected,
proportion_of_species_incorrectly_detected = mean_n_species_incorrectly_detected/mean_total_species_detected)
jpeg(file = paste0("../R plots/BirdNET_", BirdNET_version, filtered_text, overlap_text, "/BirdNET recall analysis/proportion_of_species_correctly_detected_by_n_recordings_sampled.jpeg"), width = 4000, height = 2500, res = 500)
ggplot(grouped_global_detection_results, aes(x = as.numeric(n_recordings_sampled), y = proportion_of_species_correctly_detected, fill = as.factor(minimum_confidence_threshold))) +
geom_bar(position = position_nudge(x = 0.5), stat = "identity",
colour = 'black') +
xlab("Number of recordings sampled") +
ylab("Proportion of species correctly detected") +
labs(fill = "Minimum confidence\nthreshold used") +
scale_fill_manual(values = c("#2b4056", "#3874a5", "#56b1f7")) +
ggtitle("Proportion of species correctly detected by number of recordings sampled") +
theme_bw()
dev.off()
jpeg(file = paste0("../R plots/BirdNET_", BirdNET_version, filtered_text, overlap_text, "/BirdNET recall analysis/proportion_of_species_incorrectly_detected_by_n_recordings_sampled.jpeg"), width = 4000, height = 2500, res = 500)
ggplot(grouped_global_detection_results, aes(x = as.numeric(n_recordings_sampled), y = proportion_of_species_incorrectly_detected, fill = as.factor(minimum_confidence_threshold))) +
geom_bar(position = position_nudge(x = 0.5), stat = "identity",
colour = 'black') +
xlab("Number of recordings sampled") +
ylab("Proportion of species mistakenly detected") +
labs(fill = "Minimum confidence\nthreshold used") +
scale_fill_manual(values = c("#2b4056", "#3874a5", "#56b1f7")) +
ggtitle("Proportion of species mistakenly detected by number of recordings sampled") +
theme_bw()
dev.off()
global_detection_results <- global_detection_results %>%
mutate(proportion_of_species_correctly_detected = n_species_correctly_detected/total_species_detected,
proportion_of_species_incorrectly_detected = n_species_incorrectly_detected/total_species_detected)
correctly_detected_lm <- lm(proportion_of_species_correctly_detected ~ log(n_recordings_sampled) + as.numeric(minimum_confidence_threshold), data = global_detection_results)
summary(correctly_detected_lm)
# It appears that there is a linear correlation between the proportion of species correctly detected and the logarithm of the number of recordings sampled
# after controlling for the minimum confidence threshold used (p < 2e-16)
incorrectly_detected_lm <- lm(proportion_of_species_incorrectly_detected ~ log(n_recordings_sampled) + as.numeric(minimum_confidence_threshold), data = global_detection_results)
summary(incorrectly_detected_lm)
# The same does seem to be true as well of the proportion of species incorrectly detected (p < 2e-16)
PR_results <- read.csv(paste0("../CSVs/BirdNET_Analyzer/BirdNET_PR_results.csv"))
PR_results_overlap_1s <- read.csv(paste0("../CSVs/BirdNET_Analyzer/Overlap_1s/BirdNET_PR_results.csv"))
PR_results_overlap_2s <- read.csv(paste0("../CSVs/BirdNET_Analyzer/Overlap_2s/BirdNET_PR_results.csv"))
PR_results_filtered_overlap_2s <- read.csv(paste0("../CSVs/BirdNET_Analyzer/Filtered/Overlap_2s/BirdNET_PR_results.csv"))
PR_results <- read.csv(paste0("../CSVs/BirdNET_Analyzer/BirdNET_PR_results.csv")) %>%
mutate(parameters = "0s overlap")
PR_results_overlap_1s <- read.csv(paste0("../CSVs/BirdNET_Analyzer/Overlap_1s/BirdNET_PR_results.csv")) %>%
mutate(parameters = "1s overlap")
PR_results_overlap_2s <- read.csv(paste0("../CSVs/BirdNET_Analyzer/Overlap_2s/BirdNET_PR_results.csv")) %>%
mutate(parameters = "2s overlap")
library(dplyr)
library(ggplot2)
library(grid)
library(pracma)
library(qdapRegex)
# library(PRROC)
source("./Algorithm_version_selection.R")
PR_results <- read.csv(paste0("../CSVs/BirdNET_Analyzer/BirdNET_PR_results.csv")) %>%
mutate(parameters = "0s overlap")
PR_results_overlap_1s <- read.csv(paste0("../CSVs/BirdNET_Analyzer/Overlap_1s/BirdNET_PR_results.csv")) %>%
mutate(parameters = "1s overlap")
PR_results_overlap_2s <- read.csv(paste0("../CSVs/BirdNET_Analyzer/Overlap_2s/BirdNET_PR_results.csv")) %>%
mutate(parameters = "2s overlap")
PR_results_filtered_overlap_2s <- read.csv(paste0("../CSVs/BirdNET_Analyzer/Filtered/Overlap_2s/BirdNET_PR_results.csv")) %>%
mutate(parameters = "2s overlap with 2KHz\nhigh-pass frequency filter")
View(PR_results)
global_PR_results <- rbind(PR_results, PR_results_overlap_1s, PR_results_overlap_2s, PR_results_filtered_overlap_2s)
ggplot(global_PR_results, aes(x = FPR, y = TPR, color = parameters)) +
geom_point() +
guides(color = guide_colorbar(reverse = FALSE, barheight = 10)) +
xlab("False positive rate") +
ylab("True positive rate") +
ylim(c(0, 0.33)) +
xlim(c(0, 0.016)) +
labs(color = "Confidence \n  threshold") +
ggtitle("ROC curve") +
theme_bw() +
# Eliminates background, gridlines, and chart border
theme(
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
plot.title = element_text(hjust = 0.5,
margin = margin(0,0,10,0))
) +
# Draws x and y axis line
theme(axis.line = element_line(color = 'black'))
ggplot(global_PR_results, aes(x = FPR, y = TPR, color = parameters)) +
geom_point() +
guides(color = guide_colorbar(reverse = FALSE, barheight = 10)) +
xlab("False positive rate") +
ylab("True positive rate") +
labs(color = "Confidence \n  threshold") +
ggtitle("ROC curve") +
theme_bw() +
# Eliminates background, gridlines, and chart border
theme(
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
plot.title = element_text(hjust = 0.5,
margin = margin(0,0,10,0))
) +
# Draws x and y axis line
theme(axis.line = element_line(color = 'black'))
ggplot(global_PR_results, aes(x = FPR, y = TPR, color = parameters)) +
geom_point() +
xlab("False positive rate") +
ylab("True positive rate") +
labs(color = "Confidence \n  threshold") +
ggtitle("ROC curve") +
theme_bw() +
# Eliminates background, gridlines, and chart border
theme(
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
plot.title = element_text(hjust = 0.5,
margin = margin(0,0,10,0))
) +
# Draws x and y axis line
theme(axis.line = element_line(color = 'black'))
library(viridis)
ggplot(global_PR_results, aes(x = FPR, y = TPR, color = parameters)) +
geom_point() +
xlab("False positive rate") +
ylab("True positive rate") +
labs(color = "Level of overlap") +
ggtitle("ROC curve") +
scale_fill_viridis() +
theme_bw() +
# Eliminates background, gridlines, and chart border
theme(
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
plot.title = element_text(hjust = 0.5,
margin = margin(0,0,10,0))
) +
# Draws x and y axis line
theme(axis.line = element_line(color = 'black'))
ggplot(global_PR_results, aes(x = FPR, y = TPR, color = parameters)) +
geom_point() +
xlab("False positive rate") +
ylab("True positive rate") +
labs(color = "Level of overlap") +
ggtitle("ROC curve") +
theme_bw() +
# Eliminates background, gridlines, and chart border
theme(
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
plot.title = element_text(hjust = 0.5,
margin = margin(0,0,10,0))
) +
scale_fill_viridis() +
# Draws x and y axis line
theme(axis.line = element_line(color = 'black'))
ggplot(global_PR_results, aes(x = FPR, y = TPR, color = parameters)) +
geom_point() +
xlab("False positive rate") +
ylab("True positive rate") +
labs(color = "Level of overlap") +
ggtitle("ROC curve") +
theme_bw() +
# Eliminates background, gridlines, and chart border
theme(
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
plot.title = element_text(hjust = 0.5,
margin = margin(0,0,10,0))
) +
scale_color_viridis() +
# Draws x and y axis line
theme(axis.line = element_line(color = 'black'))
ggplot(global_PR_results, aes(x = FPR, y = TPR, color = parameters)) +
geom_point() +
xlab("False positive rate") +
ylab("True positive rate") +
labs(color = "Level of overlap") +
ggtitle("ROC curve") +
theme_bw() +
# Eliminates background, gridlines, and chart border
theme(
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
plot.title = element_text(hjust = 0.5,
margin = margin(0,0,10,0))
) +
scale_color_viridis(discrete = TRUE) +
# Draws x and y axis line
theme(axis.line = element_line(color = 'black'))
ggplot(global_PR_results, aes(x = FPR, y = TPR, color = parameters)) +
geom_point() +
xlab("False positive rate") +
ylab("True positive rate") +
labs(color = "Level of overlap") +
ggtitle("ROC curve") +
theme_bw() +
# Eliminates background, gridlines, and chart border
theme(
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
plot.title = element_text(hjust = 0.5,
margin = margin(0,0,10,0))
) +
scale_color_mako(discrete = TRUE) +
# Draws x and y axis line
theme(axis.line = element_line(color = 'black'))
library(mako)
install.packages("mako")
library(mako)
install.packages("viridisLite")
install.packages("viridisLite")
library(viridisLite)
ggplot(global_PR_results, aes(x = FPR, y = TPR, color = parameters)) +
geom_point() +
xlab("False positive rate") +
ylab("True positive rate") +
labs(color = "Level of overlap") +
ggtitle("ROC curve") +
theme_bw() +
# Eliminates background, gridlines, and chart border
theme(
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
plot.title = element_text(hjust = 0.5,
margin = margin(0,0,10,0))
) +
scale_color_viridis(discrete = TRUE) +
# Draws x and y axis line
theme(axis.line = element_line(color = 'black'))
library(dplyr)
library(ggplot2)
library(grid)
library(pracma)
library(qdapRegex)
# library(PRROC)
PR_results <- read.csv(paste0("../CSVs/BirdNET_Analyzer/BirdNET_PR_results.csv")) %>%
mutate(parameters = "0s overlap")
PR_results_overlap_1s <- read.csv(paste0("../CSVs/BirdNET_Analyzer/Overlap_1s/BirdNET_PR_results.csv")) %>%
mutate(parameters = "1s overlap")
PR_results_overlap_2s <- read.csv(paste0("../CSVs/BirdNET_Analyzer/Overlap_2s/BirdNET_PR_results.csv")) %>%
mutate(parameters = "2s overlap")
PR_results_filtered_overlap_2s <- read.csv(paste0("../CSVs/BirdNET_Analyzer/Filtered/Overlap_2s/BirdNET_PR_results.csv")) %>%
mutate(parameters = "2s overlap with 2KHz\nhigh-pass frequency filter")
global_PR_results <- rbind(PR_results, PR_results_overlap_1s, PR_results_overlap_2s, PR_results_filtered_overlap_2s)
ggplot(global_PR_results, aes(x = FPR, y = TPR, color = parameters)) +
geom_point() +
xlab("False positive rate") +
ylab("True positive rate") +
labs(color = "Level of overlap") +
ggtitle("ROC curve") +
theme_bw() +
# Eliminates background, gridlines, and chart border
theme(
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
plot.title = element_text(hjust = 0.5,
margin = margin(0,0,10,0))
) +
scale_fill_discrete_qualitative(palette = "Harmonic") +
# Draws x and y axis line
theme(axis.line = element_line(color = 'black'))
install.packages("hcl.colors")
hcl.colors(n, palette = "viridis", alpha = NULL, rev = FALSE, fixup = TRUE)
pal(rainbow_hcl(4, start = 30, end = 300), main = "dynamic")
rainbow_hcl(4, start = 30, end = 300)
install.packages("colorspace")
install.packages("colorspace")
library(colorspace)
PR_results <- read.csv(paste0("../CSVs/BirdNET_Analyzer/BirdNET_PR_results.csv")) %>%
mutate(parameters = "0s overlap")
PR_results_overlap_1s <- read.csv(paste0("../CSVs/BirdNET_Analyzer/Overlap_1s/BirdNET_PR_results.csv")) %>%
mutate(parameters = "1s overlap")
PR_results_overlap_2s <- read.csv(paste0("../CSVs/BirdNET_Analyzer/Overlap_2s/BirdNET_PR_results.csv")) %>%
mutate(parameters = "2s overlap")
PR_results_filtered_overlap_2s <- read.csv(paste0("../CSVs/BirdNET_Analyzer/Filtered/Overlap_2s/BirdNET_PR_results.csv")) %>%
mutate(parameters = "2s overlap with 2KHz\nhigh-pass frequency filter")
library(dplyr)
library(ggplot2)
library(grid)
library(pracma)
library(qdapRegex)
library(colorspace)
PR_results <- read.csv(paste0("../CSVs/BirdNET_Analyzer/BirdNET_PR_results.csv")) %>%
mutate(parameters = "0s overlap")
PR_results_overlap_1s <- read.csv(paste0("../CSVs/BirdNET_Analyzer/Overlap_1s/BirdNET_PR_results.csv")) %>%
mutate(parameters = "1s overlap")
PR_results_overlap_2s <- read.csv(paste0("../CSVs/BirdNET_Analyzer/Overlap_2s/BirdNET_PR_results.csv")) %>%
mutate(parameters = "2s overlap")
PR_results_filtered_overlap_2s <- read.csv(paste0("../CSVs/BirdNET_Analyzer/Filtered/Overlap_2s/BirdNET_PR_results.csv")) %>%
mutate(parameters = "2s overlap with 2KHz\nhigh-pass frequency filter")
global_PR_results <- rbind(PR_results, PR_results_overlap_1s, PR_results_overlap_2s, PR_results_filtered_overlap_2s)
ggplot(global_PR_results, aes(x = FPR, y = TPR, color = parameters)) +
geom_point() +
xlab("False positive rate") +
ylab("True positive rate") +
labs(color = "Level of overlap") +
ggtitle("ROC curve") +
theme_bw() +
# Eliminates background, gridlines, and chart border
theme(
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
plot.title = element_text(hjust = 0.5,
margin = margin(0,0,10,0))
) +
scale_fill_discrete_qualitative(palette = "Harmonic") +
# Draws x and y axis line
theme(axis.line = element_line(color = 'black'))
ggplot(global_PR_results, aes(x = FPR, y = TPR, color = parameters)) +
geom_point() +
xlab("False positive rate") +
ylab("True positive rate") +
labs(color = "Level of overlap") +
ggtitle("ROC curve") +
theme_bw() +
# Eliminates background, gridlines, and chart border
theme(
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
plot.title = element_text(hjust = 0.5,
margin = margin(0,0,10,0))
) +
scale_fill_discrete_qualitative(palette = "harmonic") +
# Draws x and y axis line
theme(axis.line = element_line(color = 'black'))
ggplot(global_PR_results, aes(x = FPR, y = TPR, color = parameters)) +
geom_point() +
xlab("False positive rate") +
ylab("True positive rate") +
labs(color = "Level of overlap") +
ggtitle("ROC curve") +
theme_bw() +
# Eliminates background, gridlines, and chart border
theme(
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
plot.title = element_text(hjust = 0.5,
margin = margin(0,0,10,0))
) +
scale_color_discrete_qualitative(palette = "Harmonic") +
# Draws x and y axis line
theme(axis.line = element_line(color = 'black'))
ggplot(global_PR_results, aes(x = FPR, y = TPR, color = parameters)) +
geom_point() +
xlab("False positive rate") +
ylab("True positive rate") +
labs(color = "Level of overlap") +
ggtitle("ROC curve") +
theme_bw() +
# Eliminates background, gridlines, and chart border
theme(
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
plot.title = element_text(hjust = 0.5,
margin = margin(0,0,10,0))
) +
scale_color_discrete_qualitative(palette = "Viridis") +
# Draws x and y axis line
theme(axis.line = element_line(color = 'black'))
ggplot(global_PR_results, aes(x = FPR, y = TPR, color = parameters)) +
geom_point() +
xlab("False positive rate") +
ylab("True positive rate") +
labs(color = "Level of overlap") +
ggtitle("ROC curve") +
theme_bw() +
# Eliminates background, gridlines, and chart border
theme(
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
plot.title = element_text(hjust = 0.5,
margin = margin(0,0,10,0))
) +
scale_color_discrete_qualitative(palette = "Dark 2") +
# Draws x and y axis line
theme(axis.line = element_line(color = 'black'))
ggplot(global_PR_results, aes(x = FPR, y = TPR, color = parameters)) +
geom_point() +
xlab("False positive rate") +
ylab("True positive rate") +
labs(color = "Level of overlap") +
ggtitle("ROC curve") +
theme_bw() +
# Eliminates background, gridlines, and chart border
theme(
plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
plot.title = element_text(hjust = 0.5,
margin = margin(0,0,10,0))
) +
scale_color_discrete_qualitative(palette = "Dark 3") +
# Draws x and y axis line
theme(axis.line = element_line(color = 'black'))
source("~/Escriptori/Màster Ecologia/TFM/R scripts/compile_PR_results.R", echo=TRUE)
